
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.IBLL;
using Apps.IDAL;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.Models.Sys;
namespace Apps.BLL
{
	public class Virtual_SysUserBLL
	{
        [Dependency]
        public ISysUserRepository m_Rep { get; set; }

		public virtual List<SysUserModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<SysUser> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
				
				a=>a.Id.Contains(queryStr)
				

				|| a.UserName.Contains(queryStr)
				

				|| a.Password.Contains(queryStr)
				

				|| a.TrueName.Contains(queryStr)
				

				|| a.Card.Contains(queryStr)
				

				|| a.MobileNumber.Contains(queryStr)
				

				|| a.PhoneNumber.Contains(queryStr)
				

				|| a.QQ.Contains(queryStr)
				

				|| a.EmailAddress.Contains(queryStr)
				

				|| a.OtherContact.Contains(queryStr)
				

				|| a.Province.Contains(queryStr)
				

				|| a.City.Contains(queryStr)
				

				|| a.Village.Contains(queryStr)
				

				|| a.Address.Contains(queryStr)
				

				
				

				
				

				|| a.CreatePerson.Contains(queryStr)
				

				|| a.Sex.Contains(queryStr)
				

				
				

				
				

				|| a.Marital.Contains(queryStr)
				

				|| a.Political.Contains(queryStr)
				

				|| a.Nationality.Contains(queryStr)
				

				|| a.Native.Contains(queryStr)
				

				|| a.School.Contains(queryStr)
				

				|| a.Professional.Contains(queryStr)
				

				|| a.Degree.Contains(queryStr)
				

				|| a.DepId.Contains(queryStr)
				

				|| a.PosId.Contains(queryStr)
				

				|| a.Expertise.Contains(queryStr)
				

				
				

				|| a.Photo.Contains(queryStr)
				

				|| a.Attach.Contains(queryStr)
				

				|| a.Lead.Contains(queryStr)
				

				|| a.LeadName.Contains(queryStr)
				

				
				

				
				

				
				

				|| a.HomePhone.Contains(queryStr)
				

				|| a.WXID.Contains(queryStr)
				

				|| a.Signature.Contains(queryStr)
				

				|| a.QRCode.Contains(queryStr)
				

				|| a.IdentityCardFile.Contains(queryStr)
				

				|| a.IdentityCardBackFile.Contains(queryStr)
				

				
				

				|| a.AuditStatus.Contains(queryStr)
				

				|| a.Note.Contains(queryStr)
				

				|| a.SortCode.Contains(queryStr)
				

				|| a.RecommendID.Contains(queryStr)
				

				
				

				|| a.EditorID.Contains(queryStr)
				

				
				

				
				

				|| a.Questions.Contains(queryStr)
				

				|| a.Answer.Contains(queryStr)
				

				|| a.LastLoginIP.Contains(queryStr)
				

				
				

				|| a.CurrentLoginIP.Contains(queryStr)
				

				
				

				
				

				|| a.Recommendor.Contains(queryStr)
				

				);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<SysUserModel> CreateModelList(ref IQueryable<SysUser> queryData)
        {

            List<SysUserModel> modelList = (from r in queryData
                                              select new SysUserModel
                                              {

													Id = r.Id,

													UserName = r.UserName,

													Password = r.Password,

													TrueName = r.TrueName,

													Card = r.Card,

													MobileNumber = r.MobileNumber,

													PhoneNumber = r.PhoneNumber,

													QQ = r.QQ,

													EmailAddress = r.EmailAddress,

													OtherContact = r.OtherContact,

													Province = r.Province,

													City = r.City,

													Village = r.Village,

													Address = r.Address,

													State = r.State,

													CreateTime = r.CreateTime,

													CreatePerson = r.CreatePerson,

													Sex = r.Sex,

													Birthday = r.Birthday,

													JoinDate = r.JoinDate,

													Marital = r.Marital,

													Political = r.Political,

													Nationality = r.Nationality,

													Native = r.Native,

													School = r.School,

													Professional = r.Professional,

													Degree = r.Degree,

													DepId = r.DepId,

													PosId = r.PosId,

													Expertise = r.Expertise,

													JobState = r.JobState,

													Photo = r.Photo,

													Attach = r.Attach,

													Lead = r.Lead,

													LeadName = r.LeadName,

													IsSelLead = r.IsSelLead,

													IsReportCalendar = r.IsReportCalendar,

													IsSecretary = r.IsSecretary,

													HomePhone = r.HomePhone,

													WXID = r.WXID,

													Signature = r.Signature,

													QRCode = r.QRCode,

													IdentityCardFile = r.IdentityCardFile,

													IdentityCardBackFile = r.IdentityCardBackFile,

													IsAuth = r.IsAuth,

													AuditStatus = r.AuditStatus,

													Note = r.Note,

													SortCode = r.SortCode,

													RecommendID = r.RecommendID,

													RecommendTime = r.RecommendTime,

													EditorID = r.EditorID,

													UpdateTime = r.UpdateTime,

													IsDeleted = r.IsDeleted,

													Questions = r.Questions,

													Answer = r.Answer,

													LastLoginIP = r.LastLoginIP,

													LastLoginTime = r.LastLoginTime,

													CurrentLoginIP = r.CurrentLoginIP,

													CurrentLoginTime = r.CurrentLoginTime,

													LastPasswdTime = r.LastPasswdTime,

													Recommendor = r.Recommendor,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, SysUserModel model)
        {
            try
            {
                SysUser entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new SysUser();
               
				entity.Id = model.Id;

				entity.UserName = model.UserName;

				entity.Password = model.Password;

				entity.TrueName = model.TrueName;

				entity.Card = model.Card;

				entity.MobileNumber = model.MobileNumber;

				entity.PhoneNumber = model.PhoneNumber;

				entity.QQ = model.QQ;

				entity.EmailAddress = model.EmailAddress;

				entity.OtherContact = model.OtherContact;

				entity.Province = model.Province;

				entity.City = model.City;

				entity.Village = model.Village;

				entity.Address = model.Address;

				entity.State = model.State;

				entity.CreateTime = model.CreateTime;

				entity.CreatePerson = model.CreatePerson;

				entity.Sex = model.Sex;

				entity.Birthday = model.Birthday;

				entity.JoinDate = model.JoinDate;

				entity.Marital = model.Marital;

				entity.Political = model.Political;

				entity.Nationality = model.Nationality;

				entity.Native = model.Native;

				entity.School = model.School;

				entity.Professional = model.Professional;

				entity.Degree = model.Degree;

				entity.DepId = model.DepId;

				entity.PosId = model.PosId;

				entity.Expertise = model.Expertise;

				entity.JobState = model.JobState;

				entity.Photo = model.Photo;

				entity.Attach = model.Attach;

				entity.Lead = model.Lead;

				entity.LeadName = model.LeadName;

				entity.IsSelLead = model.IsSelLead;

				entity.IsReportCalendar = model.IsReportCalendar;

				entity.IsSecretary = model.IsSecretary;

				entity.HomePhone = model.HomePhone;

				entity.WXID = model.WXID;

				entity.Signature = model.Signature;

				entity.QRCode = model.QRCode;

				entity.IdentityCardFile = model.IdentityCardFile;

				entity.IdentityCardBackFile = model.IdentityCardBackFile;

				entity.IsAuth = model.IsAuth;

				entity.AuditStatus = model.AuditStatus;

				entity.Note = model.Note;

				entity.SortCode = model.SortCode;

				entity.RecommendID = model.RecommendID;

				entity.RecommendTime = model.RecommendTime;

				entity.EditorID = model.EditorID;

				entity.UpdateTime = model.UpdateTime;

				entity.IsDeleted = model.IsDeleted;

				entity.Questions = model.Questions;

				entity.Answer = model.Answer;

				entity.LastLoginIP = model.LastLoginIP;

				entity.LastLoginTime = model.LastLoginTime;

				entity.CurrentLoginIP = model.CurrentLoginIP;

				entity.CurrentLoginTime = model.CurrentLoginTime;

				entity.LastPasswdTime = model.LastPasswdTime;

				entity.Recommendor = model.Recommendor;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, SysUserModel model)
        {
            try
            {
                SysUser entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              
				entity.Id = model.Id;

				entity.UserName = model.UserName;

				entity.Password = model.Password;

				entity.TrueName = model.TrueName;

				entity.Card = model.Card;

				entity.MobileNumber = model.MobileNumber;

				entity.PhoneNumber = model.PhoneNumber;

				entity.QQ = model.QQ;

				entity.EmailAddress = model.EmailAddress;

				entity.OtherContact = model.OtherContact;

				entity.Province = model.Province;

				entity.City = model.City;

				entity.Village = model.Village;

				entity.Address = model.Address;

				entity.State = model.State;

				entity.CreateTime = model.CreateTime;

				entity.CreatePerson = model.CreatePerson;

				entity.Sex = model.Sex;

				entity.Birthday = model.Birthday;

				entity.JoinDate = model.JoinDate;

				entity.Marital = model.Marital;

				entity.Political = model.Political;

				entity.Nationality = model.Nationality;

				entity.Native = model.Native;

				entity.School = model.School;

				entity.Professional = model.Professional;

				entity.Degree = model.Degree;

				entity.DepId = model.DepId;

				entity.PosId = model.PosId;

				entity.Expertise = model.Expertise;

				entity.JobState = model.JobState;

				entity.Photo = model.Photo;

				entity.Attach = model.Attach;

				entity.Lead = model.Lead;

				entity.LeadName = model.LeadName;

				entity.IsSelLead = model.IsSelLead;

				entity.IsReportCalendar = model.IsReportCalendar;

				entity.IsSecretary = model.IsSecretary;

				entity.HomePhone = model.HomePhone;

				entity.WXID = model.WXID;

				entity.Signature = model.Signature;

				entity.QRCode = model.QRCode;

				entity.IdentityCardFile = model.IdentityCardFile;

				entity.IdentityCardBackFile = model.IdentityCardBackFile;

				entity.IsAuth = model.IsAuth;

				entity.AuditStatus = model.AuditStatus;

				entity.Note = model.Note;

				entity.SortCode = model.SortCode;

				entity.RecommendID = model.RecommendID;

				entity.RecommendTime = model.RecommendTime;

				entity.EditorID = model.EditorID;

				entity.UpdateTime = model.UpdateTime;

				entity.IsDeleted = model.IsDeleted;

				entity.Questions = model.Questions;

				entity.Answer = model.Answer;

				entity.LastLoginIP = model.LastLoginIP;

				entity.LastLoginTime = model.LastLoginTime;

				entity.CurrentLoginIP = model.CurrentLoginIP;

				entity.CurrentLoginTime = model.CurrentLoginTime;

				entity.LastPasswdTime = model.LastPasswdTime;

				entity.Recommendor = model.Recommendor;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual SysUserModel GetById(string id)
        {
            if (IsExists(id))
            {
                SysUser entity = m_Rep.GetById(id);
                SysUserModel model = new SysUserModel();
                              
				model.Id = entity.Id;

				model.UserName = entity.UserName;

				model.Password = entity.Password;

				model.TrueName = entity.TrueName;

				model.Card = entity.Card;

				model.MobileNumber = entity.MobileNumber;

				model.PhoneNumber = entity.PhoneNumber;

				model.QQ = entity.QQ;

				model.EmailAddress = entity.EmailAddress;

				model.OtherContact = entity.OtherContact;

				model.Province = entity.Province;

				model.City = entity.City;

				model.Village = entity.Village;

				model.Address = entity.Address;

				model.State = entity.State;

				model.CreateTime = entity.CreateTime;

				model.CreatePerson = entity.CreatePerson;

				model.Sex = entity.Sex;

				model.Birthday = entity.Birthday;

				model.JoinDate = entity.JoinDate;

				model.Marital = entity.Marital;

				model.Political = entity.Political;

				model.Nationality = entity.Nationality;

				model.Native = entity.Native;

				model.School = entity.School;

				model.Professional = entity.Professional;

				model.Degree = entity.Degree;

				model.DepId = entity.DepId;

				model.PosId = entity.PosId;

				model.Expertise = entity.Expertise;

				model.JobState = entity.JobState;

				model.Photo = entity.Photo;

				model.Attach = entity.Attach;

				model.Lead = entity.Lead;

				model.LeadName = entity.LeadName;

				model.IsSelLead = entity.IsSelLead;

				model.IsReportCalendar = entity.IsReportCalendar;

				model.IsSecretary = entity.IsSecretary;

				model.HomePhone = entity.HomePhone;

				model.WXID = entity.WXID;

				model.Signature = entity.Signature;

				model.QRCode = entity.QRCode;

				model.IdentityCardFile = entity.IdentityCardFile;

				model.IdentityCardBackFile = entity.IdentityCardBackFile;

				model.IsAuth = entity.IsAuth;

				model.AuditStatus = entity.AuditStatus;

				model.Note = entity.Note;

				model.SortCode = entity.SortCode;

				model.RecommendID = entity.RecommendID;

				model.RecommendTime = entity.RecommendTime;

				model.EditorID = entity.EditorID;

				model.UpdateTime = entity.UpdateTime;

				model.IsDeleted = entity.IsDeleted;

				model.Questions = entity.Questions;

				model.Answer = entity.Answer;

				model.LastLoginIP = entity.LastLoginIP;

				model.LastLoginTime = entity.LastLoginTime;

				model.CurrentLoginIP = entity.CurrentLoginIP;

				model.CurrentLoginTime = entity.CurrentLoginTime;

				model.LastPasswdTime = entity.LastPasswdTime;

				model.Recommendor = entity.Recommendor;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}

}
