//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.IBLL;
using Apps.IDAL;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.Models.Sys;
namespace Apps.BLL
{
	public class Virtual_SysHelpsBLL
	{
        [Dependency]
        public ISysHelpsRepository m_Rep { get; set; }

		public virtual List<SysHelpsModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<SysHelps> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.id.Contains(queryStr)
								|| a.Title.Contains(queryStr)
								|| a.Cont.Contains(queryStr)
								|| a.Category.Contains(queryStr)
								
								
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<SysHelpsModel> CreateModelList(ref IQueryable<SysHelps> queryData)
        {

            List<SysHelpsModel> modelList = (from r in queryData
                                              select new SysHelpsModel
                                              {
													id = r.id,
													Title = r.Title,
													Cont = r.Cont,
													Category = r.Category,
													CreateTime = r.CreateTime,
													UpdateTime = r.UpdateTime,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, SysHelpsModel model)
        {
            try
            {
                SysHelps entity = m_Rep.GetById(model.id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new SysHelps();
               				entity.id = model.id;
				entity.Title = model.Title;
				entity.Cont = model.Cont;
				entity.Category = model.Category;
				entity.CreateTime = model.CreateTime;
				entity.UpdateTime = model.UpdateTime;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, SysHelpsModel model)
        {
            try
            {
                SysHelps entity = m_Rep.GetById(model.id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.id = model.id;
				entity.Title = model.Title;
				entity.Cont = model.Cont;
				entity.Category = model.Category;
				entity.CreateTime = model.CreateTime;
				entity.UpdateTime = model.UpdateTime;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual SysHelpsModel GetById(string id)
        {
            if (IsExists(id))
            {
                SysHelps entity = m_Rep.GetById(id);
                SysHelpsModel model = new SysHelpsModel();
                              				model.id = entity.id;
				model.Title = entity.Title;
				model.Cont = entity.Cont;
				model.Category = entity.Category;
				model.CreateTime = entity.CreateTime;
				model.UpdateTime = entity.UpdateTime;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
