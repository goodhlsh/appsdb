
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.Spl.IDAL;
using Apps.Models.Spl;
namespace Apps.Spl.BLL
{
	public class Virtual_Spl_WareInfoBLL
	{
        [Dependency]
        public ISpl_WareInfoRepository m_Rep { get; set; }

		public virtual List<Spl_WareInfoModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<Spl_WareInfo> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
				
				a=>a.Id.Contains(queryStr)
				

				|| a.Picture0.Contains(queryStr)
				

				|| a.Picture1.Contains(queryStr)
				

				|| a.Picture2.Contains(queryStr)
				

				|| a.Picture3.Contains(queryStr)
				

				|| a.Picture4.Contains(queryStr)
				

				|| a.Picture5.Contains(queryStr)
				

				|| a.Detail.Contains(queryStr)
				

				
				

				
				

				|| a.Creator.Contains(queryStr)
				

				
				

				|| a.Editor.Contains(queryStr)
				

				|| a.WareId.Contains(queryStr)
				

				);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<Spl_WareInfoModel> CreateModelList(ref IQueryable<Spl_WareInfo> queryData)
        {

            List<Spl_WareInfoModel> modelList = (from r in queryData
                                              select new Spl_WareInfoModel
                                              {

													Id = r.Id,

													Picture0 = r.Picture0,

													Picture1 = r.Picture1,

													Picture2 = r.Picture2,

													Picture3 = r.Picture3,

													Picture4 = r.Picture4,

													Picture5 = r.Picture5,

													Detail = r.Detail,

													ToTop = r.ToTop,

													CreateTime = r.CreateTime,

													Creator = r.Creator,

													UpdateTime = r.UpdateTime,

													Editor = r.Editor,

													WareId = r.WareId,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, Spl_WareInfoModel model)
        {
            try
            {
			    Spl_WareInfo entity = m_Rep.GetById(model.Id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new Spl_WareInfo(); 

				entity.Id = model.Id;

				entity.Picture0 = model.Picture0;

				entity.Picture1 = model.Picture1;

				entity.Picture2 = model.Picture2;

				entity.Picture3 = model.Picture3;

				entity.Picture4 = model.Picture4;

				entity.Picture5 = model.Picture5;

				entity.Detail = model.Detail;

				entity.ToTop = model.ToTop;

				entity.CreateTime = model.CreateTime;

				entity.Creator = model.Creator;

				entity.UpdateTime = model.UpdateTime;

				entity.Editor = model.Editor;

				entity.WareId = model.WareId;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, Spl_WareInfoModel model)
        {
            try
            {
                Spl_WareInfo entity = m_Rep.GetById(model.Id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              
				entity.Id = model.Id;

				entity.Picture0 = model.Picture0;

				entity.Picture1 = model.Picture1;

				entity.Picture2 = model.Picture2;

				entity.Picture3 = model.Picture3;

				entity.Picture4 = model.Picture4;

				entity.Picture5 = model.Picture5;

				entity.Detail = model.Detail;

				entity.ToTop = model.ToTop;

				entity.CreateTime = model.CreateTime;

				entity.Creator = model.Creator;

				entity.UpdateTime = model.UpdateTime;

				entity.Editor = model.Editor;

				entity.WareId = model.WareId;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual Spl_WareInfoModel GetById(string id)
        {
            if (IsExists(id))
            {
                Spl_WareInfo entity = m_Rep.GetById(id);
                Spl_WareInfoModel model = new Spl_WareInfoModel();
                              
				model.Id = entity.Id;

				model.Picture0 = entity.Picture0;

				model.Picture1 = entity.Picture1;

				model.Picture2 = entity.Picture2;

				model.Picture3 = entity.Picture3;

				model.Picture4 = entity.Picture4;

				model.Picture5 = entity.Picture5;

				model.Detail = entity.Detail;

				model.ToTop = entity.ToTop;

				model.CreateTime = entity.CreateTime;

				model.Creator = entity.Creator;

				model.UpdateTime = entity.UpdateTime;

				model.Editor = entity.Editor;

				model.WareId = entity.WareId;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}

}
