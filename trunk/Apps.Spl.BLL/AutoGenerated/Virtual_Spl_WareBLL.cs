//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.BLL.Core;
using Apps.Locale;
using Apps.Spl.IDAL;
using Apps.Models.Spl;
namespace Apps.Spl.BLL
{
	public class Virtual_Spl_WareBLL
	{
        [Dependency]
        public ISpl_WareRepository m_Rep { get; set; }

		public virtual List<Spl_WareModel> GetList(ref GridPager pager, string queryStr)
        {

            IQueryable<Spl_Ware> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>a.id.Contains(queryStr)
								|| a.Name.Contains(queryStr)
								|| a.ProductCategoryId.Contains(queryStr)
								|| a.Unit.Contains(queryStr)
								
								
								
								|| a.Note.Contains(queryStr)
								|| a.Thumbnail.Contains(queryStr)
								|| a.ShowType.Contains(queryStr)
								|| a.WareInfoId.Contains(queryStr)
								
								
								
								|| a.Creator.Contains(queryStr)
								
								|| a.Editor.Contains(queryStr)
								|| a.Description.Contains(queryStr)
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);
        }
        public virtual List<Spl_WareModel> CreateModelList(ref IQueryable<Spl_Ware> queryData)
        {

            List<Spl_WareModel> modelList = (from r in queryData
                                              select new Spl_WareModel
                                              {
													id = r.id,
													Name = r.Name,
													ProductCategoryId = r.ProductCategoryId,
													Unit = r.Unit,
													OriginPrice = r.OriginPrice,
													Price = r.Price,
													Stock = r.Stock,
													Note = r.Note,
													Thumbnail = r.Thumbnail,
													ShowType = r.ShowType,
													WareInfoId = r.WareInfoId,
													WareCount = r.WareCount,
													WareState = r.WareState,
													CreateTime = r.CreateTime,
													Creator = r.Creator,
													UpdateTime = r.UpdateTime,
													Editor = r.Editor,
													Description = r.Description,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, Spl_WareModel model)
        {
            try
            {
			    Spl_Ware entity = m_Rep.GetById(model.id);
                if (entity != null)
                {
                    errors.Add(Resource.PrimaryRepeat);
                    return false;
                }
                entity = new Spl_Ware(); 
				entity.id = model.id;
				entity.Name = model.Name;
				entity.ProductCategoryId = model.ProductCategoryId;
				entity.Unit = model.Unit;
				entity.OriginPrice = model.OriginPrice;
				entity.Price = model.Price;
				entity.Stock = model.Stock;
				entity.Note = model.Note;
				entity.Thumbnail = model.Thumbnail;
				entity.ShowType = model.ShowType;
				entity.WareInfoId = model.WareInfoId;
				entity.WareCount = model.WareCount;
				entity.WareState = model.WareState;
				entity.CreateTime = model.CreateTime;
				entity.Creator = model.Creator;
				entity.UpdateTime = model.UpdateTime;
				entity.Editor = model.Editor;
				entity.Description = model.Description;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, Spl_WareModel model)
        {
            try
            {
                Spl_Ware entity = m_Rep.GetById(model.id);
                if (entity == null)
                {
                    errors.Add(Resource.Disable);
                    return false;
                }
                              				entity.id = model.id;
				entity.Name = model.Name;
				entity.ProductCategoryId = model.ProductCategoryId;
				entity.Unit = model.Unit;
				entity.OriginPrice = model.OriginPrice;
				entity.Price = model.Price;
				entity.Stock = model.Stock;
				entity.Note = model.Note;
				entity.Thumbnail = model.Thumbnail;
				entity.ShowType = model.ShowType;
				entity.WareInfoId = model.WareInfoId;
				entity.WareCount = model.WareCount;
				entity.WareState = model.WareState;
				entity.CreateTime = model.CreateTime;
				entity.Creator = model.Creator;
				entity.UpdateTime = model.UpdateTime;
				entity.Editor = model.Editor;
				entity.Description = model.Description;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Resource.NoDataChange);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHander.WriteException(ex);
                return false;
            }
        }

      

        public virtual Spl_WareModel GetById(string id)
        {
            if (IsExists(id))
            {
                Spl_Ware entity = m_Rep.GetById(id);
                Spl_WareModel model = new Spl_WareModel();
                              				model.id = entity.id;
				model.Name = entity.Name;
				model.ProductCategoryId = entity.ProductCategoryId;
				model.Unit = entity.Unit;
				model.OriginPrice = entity.OriginPrice;
				model.Price = entity.Price;
				model.Stock = entity.Stock;
				model.Note = entity.Note;
				model.Thumbnail = entity.Thumbnail;
				model.ShowType = entity.ShowType;
				model.WareInfoId = entity.WareInfoId;
				model.WareCount = entity.WareCount;
				model.WareState = entity.WareState;
				model.CreateTime = entity.CreateTime;
				model.Creator = entity.Creator;
				model.UpdateTime = entity.UpdateTime;
				model.Editor = entity.Editor;
				model.Description = entity.Description;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
